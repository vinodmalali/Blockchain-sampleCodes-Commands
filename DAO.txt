DAO.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

// We will add the Interfaces here
/**
 * Interface for the FakeproposalHandler
 */
interface IScholarToken {
    /// @dev getPrice() returns the price of an NFT from the FakeproposalHandler
    /// @return Returns the price in Wei for an NFT
    function setAmtToken(uint256 _amtToken) external  returns (uint256);
    function balanceOfAdr(address _adr) external view   returns (uint);

    /// @dev available() returns whether or not the given _tokenId has already been purchased
    /// @return Returns a boolean value - true if available, false if not
    // function available(uint256 _tokenId) external view returns (bool);

    /// @dev purchase() purchases an NFT from the FakeproposalHandler
    /// @param _tokenId - the fake NFT tokenID to purchase
    // function purchase(uint256 _tokenId) external payable;
}

/**
 * Minimal interface for stuNFT containing only two functions
 * that we are interested in
 */
// interface ISTUNFT {
//     /// @dev balanceOf returns the number of NFTs owned by the given address
//     /// @param owner - address to fetch number of NFTs for
//     /// @return Returns the number of NFTs owned
//     function balanceOf(address owner) external view returns (uint256);

//     /// @dev tokenOfOwnerByIndex returns a tokenID at given index for owner
//     /// @param owner - address to fetch the NFT TokenID for
//     /// @param index - index of NFT in owned tokens array to fetch
//     /// @return Returns the TokenID of the NFT
//     function tokenOfOwnerByIndex(address owner, uint256 index)
//         external
//         view
//         returns (uint256);
// }

contract STUDAO is Ownable {
    // Create a struct named Proposal containing all relevant information
    struct Proposal {
        
        string description;
        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.
        uint256 deadline;
        // yayVotes - number of yay votes for this proposal
        uint256 yayVotes;
        // nayVotes - number of nay votes for this proposal
        uint256 nayVotes;
        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.
        bool executed;
        // voters - a mapping of STUNFT tokenIDs to booleans indicating whether that NFT has already been used to cast a vote or not
        // mapping(address => bool) voters;
    }

    uint256 public proposalCount;

    // Create a mapping of ID to Proposal
    mapping(uint256 => Proposal) public proposals;
    mapping(address => bool) voters;
    // Number of proposals that have been created
    // uint256 public numProposals;

    IScholarToken sToken;
    // ISTUNFT stuNFT;

    // Create a payable constructor which initializes the contract
    // instances for FakeproposalHandler and stuNFT
    // The payable allows this constructor to accept an ETH deposit when it is being deployed
    constructor(address _proposalHandler) payable {
        sToken = IScholarToken(_proposalHandler);
        
    }

    // Create a modifier which only allows a function to be
    // called by someone who owns at least 1 stuNFT
    modifier tokenHolderOnly() {
        require(sToken.balanceOfAdr(msg.sender) > 0, "NOT_A_DAO_MEMBER");
        _;
    }

    // 
    function createProposal(string memory _descrp)
        external
        tokenHolderOnly
        returns (uint256)
    {
        // Proposal storage proposal = proposals[numProposals];
       uint256  _deadline  = block.timestamp + 10 minutes;
        proposals[proposalCount] = Proposal(_descrp,_deadline,0,0,false);
        // proposal.nftTokenId = _nftTokenId;
        // Set the proposal's voting deadline to be (current time + 10 minutes)
        // proposals[proposalCount].deadline = block.timestamp + 10 minutes;

        proposalCount++;

        return proposalCount - 1;
    }

    // Create a modifier which only allows a function to be
    // called if the given proposal's deadline has not been exceeded yet
    modifier activeProposalOnly(uint256 proposalIndex) {
        require(
            proposals[proposalIndex].deadline > block.timestamp,
            "DEADLINE_EXCEEDED"
        );
        _;
    }

    // Create an enum named Vote containing possible options for a vote
    enum Vote {
        YAY, // YAY = 0
        NAY // NAY = 1
    }

    /// @dev voteOnProposal allows a stuNFT holder to cast their vote on an active proposal
    /// @param proposalIndex - the index of the proposal to vote on in the proposals array
    /// @param vote - the type of vote they want to cast
    function voteOnProposal(uint256 proposalIndex, Vote vote)
        external
        tokenHolderOnly
        activeProposalOnly(proposalIndex)
    {
        require(sToken.balanceOfAdr(msg.sender) > 0, "Can't vote");
        Proposal storage proposal = proposals[proposalIndex];

        
        uint256 numVotes = 0;

        // Calculate how many NFTs are owned by the voter
        // that haven't already been used for voting on this proposal
        // for (uint256 i = 0; i < voterNFTBalance; i++) {
        //     uint256 tokenId = stuNFT.tokenOfOwnerByIndex(msg.sender, i);
            if (voters[msg.sender] == false) {
                numVotes++;
                voters[msg.sender] = true;
            }
        
        require(numVotes > 0, "ALREADY_VOTED");

        if (vote == Vote.YAY) {
            proposal.yayVotes += numVotes;
        } else {
            proposal.nayVotes += numVotes;
        }
    }

    // Create a modifier which only allows a function to be
    // called if the given proposals' deadline HAS been exceeded
    // and if the proposal has not yet been executed
    modifier inactiveProposalOnly(uint256 proposalIndex) {
        require(
            proposals[proposalIndex].deadline <= block.timestamp,
            "DEADLINE_NOT_EXCEEDED"
        );
        require(
            proposals[proposalIndex].executed == false,
            "PROPOSAL_ALREADY_EXECUTED"
        );
        _;
    }

    /// @dev executeProposal allows any stuNFT holder to execute a proposal after it's deadline has been exceeded
    /// @param proposalIndex - the index of the proposal to execute in the proposals array
    function executeProposal(uint256 proposalIndex)
        external
        tokenHolderOnly
        inactiveProposalOnly(proposalIndex)
    {
        Proposal storage proposal = proposals[proposalIndex];

        // If the proposal has more YAY votes than NAY votes
        // purchase the NFT from the FakeproposalHandler
        if (proposal.yayVotes > proposal.nayVotes) {
            // uint256 nftPrice = proposalHandler.getPrice();
            // require(address(this).balance >= nftPrice, "NOT_ENOUGH_FUNDS");
            // proposalHandler.purchase{value: nftPrice}(proposal.nftTokenId);
            sToken.setAmtToken(2);
        }
        proposal.executed = true;
    }

    /// @dev withdrawEther allows the contract owner (deployer) to withdraw the ETH from the contract
    function withdrawEther() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    // The following two functions allow the contract to accept ETH deposits
    // directly from a wallet without calling a function
    receive() external payable {}

    fallback() external payable {}
}
---------------------------------------------------------------------

Token.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";

contract ScholarToken is ERC20 {

    // uint256 pricePerToken = 1000000000000;
    // uint256 amtTokenTogetService = 5000000000000000000;
    address owner;
    uint256 public amtToken = 1000000000000000000;
   // uint256 tokenSold;

    constructor(uint256 _total) ERC20("ScholarToken","ST") {
         owner = msg.sender;
        // owner = address(this);
        _mint(owner, _total* 10 ** 18);
    }

    function setAmtToken(uint256 _amtToken) external  returns (uint256){
        amtToken = _amtToken* 10 ** 18;
        return amtToken;
    }

    modifier onlyOwner() {
        require(msg.sender == owner,"owner only operation");
        _;
    }

    function sendTokens(address to) public     {
        require(transferFrom(owner,to, amtToken), "Trasfer Failed");     
    }

    function balanceOfAdr(address _adr) external view   returns (uint){
         return balanceOf(_adr);
    }


 
}
